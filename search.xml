<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[分布式系统经典理论]]></title>
    <url>%2F2019%2F03%2F06%2F%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%BB%8F%E5%85%B8%E7%90%86%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[当前大部分中、大型的网站基本都是分布式的。分布式最大的难点，在于各个节点之间信息和状态的同步。其中有2个这方面的基本理论，包括CAP定理以及BASE理论，是分布式系统的经典理论。 CAP定理CAP定理是2000年加州大学伯克利分校的Eric Brewer教授提出的，他告诉我们，在一个分布式系统中，不可能同时满足Consistency（一致性）、Availability（可用性）、Partition tolerance（分区容错性）这三个基本需求，最多只能满足其中的两个。 一致性当一个客户端对于系统读取一个value时，不管从Node1或者Node2，读到的数据应当是一致的。 如果这个时候，客户端对value进行了写入操作，从v0变成v1。这个时候如果对于Node1进行了写入操作，Node2的数据还未进行同步，那么就会出现如下场景。我们从Node1读取到的数据是新的v1，从Node2读取到的数据却是旧的v0，发生了数据不一致的情况。 CAP理论中的一致性就是要求当客户端或者服务器主动发起的写操作完毕后，所有客户端进行数据读取时，无论访问的是Node1还是Node2，都应当读取到最新的v1。 可用性可用性的意思是指只要服务器收到用户的请求，服务器就必须在一定时间内给出响应。提取关键字，其实就是两个指标： 给出响应 限定时间 用户可以选择向Node1或Node2发起读操作。不管是哪台服务器，只要收到了请求，就必须在规定时间内给予用户value，否则就不满足可用性。 如上图1分钟都未给出响应，超过了用户能够容忍的时间，那么我们可以认为系统是不可用的。 分区容错性在分布式系统中，存在很多的子网络。每个子网络就是一个区，由于一些原因导致这些网络之间通信的时候可能出现不联通的情况，但每个子网络内部通信是正常的，这种区间通信可能失败的情况称之为分区容错。 在这种情况下，仍然需要保证对我提供一致性和可用性的服务。 鱼与熊掌，不可兼得一般情况下，这3个特性是无法同时满足的。作为一个分布式系统，P是肯定需要满足的。在P满足的情况下，C和A是没办法同时成立的。 如果一致性满足，那么在上述过程中，client对Node1进行赋值，如果要保证一致性，需要对Node2的v0进行锁定操作，此时如果有请求获取Node2的v0时，会请求失败。不满足可用性。 如果可用性满足，同样是上述case，那么Node1对Node2进行数据同步的时候，不能加锁。此时访问Node2获取的数据和Node1是不一致的，因此不满足一致性。 那么有没有一种折中方案呢？有。 BASE理论BASE是Bsically Available(基本可用)、Soft state(软状态)和Eventually consistent(最终一致性)的缩写。BASE是对CAP的一致性和可用性的权衡。 基本可用指在分布式系统出现故障的时候，允许损失部分可用性，包括响应时间延长、部分功能受影响。 软状态允许数据存在中间状态，这种状态的存在不会影响系统的整体可用性，即允许不同节点的数据同步存在一定延时。 最终一致性在上述数据同步后，最终能达到所有节点数据一致的情况。]]></content>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式rpc框架]]></title>
    <url>%2F2019%2F02%2F17%2F%E5%88%86%E5%B8%83%E5%BC%8Frpc%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[基本概述服务化与服务治理服务化可以简单地理解成分布式架构，但不仅限于分布式。对于一个大型的互联网系统，一般会包含多个应用，而且应用之间往往还存在共同的业务，并且应用之间还存在调用关系。除此之外 ，对于大型的互联网系统还有一些其它的挑战，比如如何应对急剧增长的用户，如何管理好研发团队快速迭代产品研发，如何保持产品升级更加稳定等等。 服务化的特点 应用可以按业务拆分成服务。 各个服务可以独立部署。 服务可以被多个应用共享。 服务直接可以通信。 服务化的好处 降低风险，单一模块出现服务不稳定不会影响上下游服务 避免重复造轮子，易于拓展 业务架构清晰 服务化需要注意的地方 服务间的相互依赖问题 负载均衡 服务上下线 服务降级 服务鉴权 服务监控 服务治理所谓服务治理，就是解决服务化一系列问题的方案。业内比较有名的服务治理框架有阿里的dubbo。另外还有一些比较经典的rpc框架，比如Java RMI、GRPC、Thrift等。 dubbodubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC实现服务的输出和输入功能，并且可以和Spring框架无缝集成。 Provider 暴露服务的服务提供方 Consumer 调用远程服务的服务消费方 Registry 服务注册与发现的注册中心 Monitor 统计服务的调用次数和调用时间的监控中心 Container 服务运行容器 dubbo官方文档 rpcRPC是指远程过程调用。如果有两台服务器A、B，A上的一个应用想调用B服务器上应用提供的方法，因为不在一个内存空间，不能直接调用，所以需要通过网络来表达调用的语义和传达调用的数据。 通讯。需要在客户端和服务器直接建立TCP连接，可以是短连接，也可以是长连接。 寻址。即A如何找到B上对应的方法。 序列化。A请求B的时候，需要发送请求参数。因为网络协议是基于二进制的，因此需要将请求转换成对应的二进制码，这个过程称之为序列化(serialize)，有些序列化框架称也之为write。 反序列化。B收到A的请求后，得到的是二进制流，需要将其恢复成A序列化前的表达方式，方便服务器处理，这个过程称之为反序列化(deserialize)，有些序列化框架称也之为read。 返回结果。B返回给A的结果，同样需要序列化和反序列化。 自己动手写一个RPC框架上面简单介绍了RPC的通信过程，下面主要是对于这个过程的一个详细描述。这里举一个例子，有2个服务C和S。C和S分开部署，C想调用S提供的服务，如果这两个都是一家公司的内部系统，那么无疑rpc是一个很好的选择。 C需要S提供一个生单服务和一个订单查询服务： boolean saveOrder(Order order); List&lt;Order&gt; getOrderByUserId(long userId); S中提供了一个接口com.sunshine1027.rpc.IOrderService package com.sunshine1027.rpc; import java.util.List; public interface IOrderService { boolean saveOrder(Order order); List&lt;Order&gt; getOrderByUserId(long userId); } 如果说要想让C直接调用这个接口，明显是不可能的，我们只有通过网络通信实现。下面来说如何做： 服务注册和发现首先，考虑下我们的C和S肯定都不止1台服务器，两边都是集群，假设C有两台机器10.128.0.1、10.128.0.2，S也有两台机器10.128.1.1和10.128.1.2，S开发了一个8443端口。要想实现负载均衡，C和S的机器从一定程度上来说，我们的rpc框架都需要来统一管理。我们需要引入分布式应用程序协调服务来管理这些机器，业内比较成熟且有代表性的就是zookeeper。 从目录上来看，根目录下挂载的是多个appkey，每个appkey都具有唯一性，代表一个服务。每个appkey下会有多个service，每个service有server节点和client节点。server节点下挂载的是服务端所有注册了的ip，以及这个service的端口号。 client端的注册不强制内容格式，主要是为了监控service的调用，以及对于客户端调用的权限限制。常见的是client下挂着服务调用的appkey的一个集合，然后每个appkey下挂着该服务调用方的ip列表。 以上面的CS服务为例，C的appkey为com.sunshine1027.client，S的appkey为com.sunshine1027.server，那么我们注册对应的节点信息应该是下面这样的： 服务端对于服务端来说，如果不考虑太底层的方法，在通过应用代码在zk上注册如上图的节点信息，可以通过实现spring的InitializingBean接口，在afterPropertiesSet()方法中完成本机的服务注册功能。 客户端对客户端而言，客户端不仅需要完成类似服务端的注册功能，同时客户端需要获取到自己订阅的服务对应的当前最新的服务端ip列表。注册功能不再赘述，同服务端。获取服务端列表，这个功能一般通过zookeeper的watch机制，监听server下的ip节点的children变化。一旦受到变化通知，立刻去zookeeper拉取最新的ip列表。 有几个需要注意的点： 一般来说，创建的节点都是临时节点，当机器宕机或者重启(以及其他原因)导致session失效的时候，zookeeper会在server的ips节点摘除对应机器的ip节点。 如果服务端需要对访问它的客户端appkey作限制，那么服务端同样需要监听客户端的list。需要区分的是：这里监听的是client下的children节点，即监听所有的appkey，而非上面所述客户端监听的ip列表节点。 通过上面的方法，客户端能拿到所有的服务端ip，以及这个服务对应的端口，为下面的ip+port的通信过程提供了基本的保证。 客户端代理如果我们是使用thrift访问接口，那么我们的代码一般是这样的： xml&lt;bean id=&quot;orderService&quot; class=&quot;com.xxx.XXXProxy&quot;&gt; &lt;property name=&quot;conf1&quot; ref=&quot;config1&quot;/&gt; &lt;property name=&quot;interface&quot; value=&quot;com.sunshine1027.rpc.IOrderService&quot;/&gt; &lt;property name=&quot;timeout&quot; value=&quot;2000&quot;/&gt; ... &lt;/bean&gt; 调用方法 public class RpcCallService { @Resource(name = &quot;orderService&quot;) IOrderService.Iface orderService; public List&lt;Order&gt; getOrder(long userId) { return orderService.getOrderByUserId(userId); } } 在实际调用过程中，ThriftClientProxy这个类代理了IOrderService这个接口。我们先了解一下如果我们自己写一个客户端代理，这个代理类需要实现哪些功能。 显而易见，这个代理类需要实现的功能就是通过 服务端interface 客户端的appkey 服务端的appkey 这3个元素来实现远程调用。 以下是代理类的实现。 在afterPropertiesSet()里完成对于client的选取、初始化，这里的client是指通信框架，比如Netty、RMI等。 实现FactoryBean，并且实现一个代理。FactoryBean功能：用来代理一个对象，对该对象的所有方法做一个拦截。 public class SunshineClientProxy implements FactoryBean&lt;Object&gt;, InitializingBean { private String groupId;//标识 private String remoteGroupId;//远程标识 private TransportEnum transportEnum = TransportEnum.NETTY;//通信框架选择 private AbstractSerializer serializer = SerializerUtils.getDefaultSerializer();//序列化选择 private Class&lt;?&gt; serviceIface; private Object proxyObj; private AbstractSunshineClient client = null;//通信 @Override public void afterPropertiesSet() throws Exception { client = TransportUtils.getClient(transportEnum); client.init(serializer, 10000L); proxyObj = Proxy.newProxyInstance(Thread.currentThread() .getContextClassLoader(), new Class[] {serviceIface}, new InvocationHandler() { public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { // build request，通信的时候传输的是request的byte流 SunshineRpcRequest request = new SunshineRpcRequest(); request.setRequestId(UUID.randomUUID().toString()); request.setCreateMillisTime(System.currentTimeMillis()); request.setClassName(method.getDeclaringClass().getName()); request.setMethodName(method.getName()); request.setParameterTypes(method.getParameterTypes()); request.setParameters(args); request.setServerGroupId(remoteGroupId); // send SunshineRpcResponse response = client.send(request); // valid response if (response == null) { throw new Exception(&quot;netty response not found.&quot;); } if (response.isError()) { throw response.getError(); } else { return response.getResult(); } } }); } public Object getObject() throws Exception { return proxyObj; } public Class&lt;?&gt; getObjectType() { return proxyObj == null ? Object.class : proxyObj.getClass(); } } 序列化序列化框架有很多，比较常见的有protobuf，protostuff，hession，kryo，msgpack，thrift，json，xml等。 序列化框架的一些特征 序列化后的大小 序列化的速度 序列化框架本身占用的资源 可读性 Ser Time+Deser Time (ns) 除了这些特征之外，不同的序列化框架对于跨平台的支持也是不一样的。比如thrift和protobuf对于跨平台支持的比较好，而kryo对于跨平台的支持相对比较弱一些。 序列化框架的选择基于特定环境。例如公司A规模比较小，内部只使用了Java语言，可以考虑使用kryo或者hession或者protostuff来做，相对简单。例如公司B规模很大，内部使用了Java、python、C++等，那么就需要使用跨平台支持的比较好的序列化框架了。例如protobuf、hession等等了。 通信通信是服务器和客户端交互必不可少的环节，通信数据传输层协议还是socket。你可以使用Spring的HttpInvoker，也可以使用Netty，甚至可以使用Java RMI。HttpInvoker是基于Java RMI的封装，解决了一些通性的问题，比如防火墙穿透。 Netty是目前比较火的通信框架，也推荐使用netty来实现通信模块。 服务端stub invokerserver stub invoker完成对于request数据的反序列化，找到interface对于的最终执行方法，invoke后进行数据回传。 public class NettyServerHandler extends SimpleChannelInboundHandler&lt;SunshineRpcRequest&gt; { protected void messageReceived(ChannelHandlerContext channelHandlerContext, SunshineRpcRequest rpcRequest) throws Exception { SunshineRpcResponse response = new SunshineRpcResponse(); response.setRequestId(rpcRequest.getRequestId()); System.out.println(&quot;SERVER接收到消息: &quot;+ rpcRequest); try { String className = rpcRequest.getClassName(); Class&lt;?&gt; iface = Class.forName(className); String methodName = rpcRequest.getMethodName(); Class&lt;?&gt;[] parameterTypes = rpcRequest.getParameterTypes(); Object[] parameters = rpcRequest.getParameters(); FastClass serviceFastClass = FastClass.create(iface); FastMethod serviceFastMethod = serviceFastClass.getMethod(methodName, parameterTypes); Object result = serviceFastMethod.invoke(BeanUtils.getBean(iface), parameters); response.setResult(result); } catch (Throwable t) { t.printStackTrace(); response.setError(t); } //response数据传输 channelHandlerContext.channel().writeAndFlush(response); } } 到此一个完整的rpc就结束了。]]></content>
      <tags>
        <tag>分布式</tag>
        <tag>rpc</tag>
        <tag>呵呵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(转)十年学会编程]]></title>
    <url>%2F2018%2F02%2F16%2F%E5%8D%81%E5%B9%B4%E5%AD%A6%E4%BC%9A%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[原文:Peter Norvig随便走进一家书店，都会看到类似《24小时学会Java》这样的书，旁边摆着的是大量诸如在几天，几小时之内学会C语言，SQL，Ruby以及算法这样的书。如果使用Amazon上的高级搜索，使用title: teach, yourself, hours, since: 2000这个关键字来搜索，将会返回512本书。最靠前的10本书中，有9本是编程的书（唯一的例外是一本记账的书）。如果把关键字”teach yourself”替换成”learn”，或者将”hours”替换成”days”，返回的结果大同小异。 很明显，人们在学习编程的时候喜欢大跃进，或者认为编程比起其它事情来，是小菜一碟的事。Felleisen在他的书《How to Design Program》里说：“编烂程一点也不难。傻瓜也可以在21天内学会，即使他们是傻逼。” 在搞笑漫画网站Abtruse Goose也在这个漫画中表达了同样的看法。 我们来看看类似《24小时自学C++》这种标题党，到底说的什么鬼东西： 自学: 24小时之内，你没有时间写几个有意义的程序，也就无法从成功或失败中学到经验。24小时之内，你没有时间和一个有经验的程序员合作交流，也就无从理解使用C++编程的真实场景。简单来说，时间太短，你啥也学不到。因此，有这种干货标题的速成书，只是让你走马观花的瞧一下，绝非深入的理解。18世纪的英国诗人亚历山大·蒲柏曾说过：“一知半解”是一件危险的事情。这个哥哥还给牛顿写了最出名的墓志铭之一：“自然和自然律隐没在黑暗中；上帝说，让牛顿去吧！遂一片光明。” C++: (如果你有一定的编程基础)，在24小时之内，能学会一些C++的语法，但是，仅此而已了。如果你以前是个Basic语言的程序员，你可以写一些语法是C++，但是风格是Basic的程序，但是，24小时之内，C++语言的精华或糟粕，你都学不到。重点是什么？(首界图灵奖得主)Alan Perlis曾说过：“不能影响你编程思维方式的语言，是不值得学习的。”一个更加可能的场景是，在工作中，你不得不学习C++（或者JavaScript，Processing之类）的一小部分，来调用一些原有的接口，完成某个特定的任务。这种情况下，表面上说是在学习如何编程，其实只是在应付一下手上的活。 24小时内: 很不幸，24小时太少了，原因下面告诉你。研究表明，想在任何领域成为专家，大概需要10年的时间，这些领域包括下棋，作曲，发电报，弹钢琴，游泳，打网球，研究神经心理学和拓扑学。关键在于有针对性的训练，而不是漫无目的重复，训练的内容要刚好超过你现有的水平，练习以后要分析你的表现，改正发现的错误，然后重复，再重复。没有什么捷径可走，即使是Mozart，一个4岁就能弹琴的音乐天才，也是用了13年的时间，才真正的写出世界级的音乐作品。在流行音乐上，Beatles好像是在1964年访美期间一夜成名的。实际上，他们从1957年就已经开始在利物浦和汉堡的小酒馆里唱歌了，他们组建乐队的时间就更早了，他们第一张取得巨大成功的专辑《佩帕军士》，是在1967年发行的。马尔科姆·格拉德威尔让这个理论广为人知，虽然他说的是另一个说法，10000个小时而不是10年。法国现实主义摄影大师亨利·卡蒂埃-布列松有另外一个标准，他说你的前10,000张照片是你最差的。(当然，这个摄影大师没有意识到数码相机的出现，很多人能在一周内就可以拍10,000张照片)真正的大师要用一生来完成，英国作家，文学评论家和诗人塞缪尔·约翰逊说过：“在任何领域取得卓越的成就都要用一生的努力，不要妄想可以投机取巧。”英国的诗人乔叟也曾经说过：”吾生也有涯，而知也无涯。”同样，公元前400年的希波克拉底也表达过类似的意思，他也认为艺术没有止境，生命却有尽头。当然，不会有一个确定的答案告诉你需要多长时间，毕竟，假设掌握所有的技能(比如编程，下棋，跳棋和音乐)需要相同的时间也不合适，不同的人也会用不同的时间。K.Anders Ericsson教授说过：“值得注意的是，在大多数领域，即使你是个天才，要达到专家级别的高水平仍然需要时间。10000个小时只是给你一个概念，一个天才，如果每周练习10到20个小时的时间，仍然需要数年时间才能达到专家级别的水平。” 所以你想成为一个程序员，这是我编程成功的秘笈: 要对编程感兴趣，要从中能获得快乐。 保证编程足够有趣，这样才能让你花10年的时间或者10000个小时在上面也不觉得枯燥无味。动手编程。最好的学习方法是边学边做。常言道：“人的最高功力并不能通过做一天和尚撞一天钟这样的重复经验获得，但是，最高的功力可以通过有针对性的日复一日年复一年的训练来获得。”并且，“最有效果的学习需要有针对性的任务，这些任务的难度还要因人而异，并且有合理的反馈渠道，并能够根据这些反馈作出相应的改进。”这些观点引用自《Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life》这本书里。 和其他的程序员交流；阅读别人的代码 这比看书或者参加培训课程要重要。如果你愿意，在大学里花上四年时间（或者再读个研）。这能让你获得一些工作机会，也能让你在这个领域有更深入的了解。但是，如果你一上学就头痛，直接去工作也能获得相同的经验。无论是什么情况，读死书肯定是不行的。计算机科学不会让你成为编程专家，就像学习画笔和颜料不可能让你成为画家一样。这是Eric Raymond说的，他是New Hacker’s Dictionary字典的作者。我雇佣过的最好的程序员是个高中毕业的学生，他创造了伟大的软件，Mozilla，他拥有自己的新闻组，赚到了足够多的钱买了自己的酒吧。 和其他的程序员一起参与一些项目 在一些项目中成为最出色的程序员；在另一些项目中当最差劲的程序员。在当最出色的程序员的时候，要测试你领导项目的能力，用你的视野来启发别人。如果你是项目中最差的那个，要学习牛人们在做什么，如果他们不喜欢做的，你要拿来做。 接手并推进别人的项目 理解其他人写的代码。如果别人有没有考虑到的问题，你能理解并修复这些问题。思考并设计你的软件，让这些软件容易被他人维护。 学习至少6种编程语言 这6种语言中，包括一种支持抽象类的(例如Java或者C++)，一种支持函数的(Lisp, ML或者Haskell)，一种支持语义抽象的(Lisp)，一种支持声明规范的(Prolog或者C++模板)，还有一种支持并发的(Clojure或Go)。 记住，在“计算机科学”中在“计算机”这个词语。理解执行一条指令要花多长时间，从内存中取一个字（要考虑缓存有没有命中的情况）要多久，从硬盘中连续读字节要多久，在硬盘中寻址定位要多久？ 参加语言的标准化工作。这可能是有关 ANSI C++ 委员会，也可能是缩进的风格是两格缩进或四格缩进。无论如何，你能从中学到其他人对语言的喜好，也能了解到他们热爱的程度，甚至也许能知道一点他们为什么他们会这样认为？ 知道何时能从标准化语言的工作中脱身，越快越好。 很难说能从书本中学到多少东西。我第一个小孩出生的时候，我读了所有的“如何做”系列的书，但是，没有什么头绪。30个月以后，当我的第二个孩子出生，我还要重温一下那些书么？当然不用了！我都已经是老司机了，我完全靠我自己的经验，事实也证明我自己的经验要胜过那些专家们写的上千页的书。 弗雷德·布鲁克斯在他的书《没有银弹》中给出了三条建议： 尽早地系统地识别出顶级设计师 每个人给分配一个职业规划的导师 让成长中的设计师有机会互相切磋武艺 此处假设有一些人天生有成为伟大设计师的潜质，然后，就是正确的去引导他们。艾伦·佩里斯一针见血地说：”假如每个人都可以学会雕刻，那就得教米开朗基罗哪些事不要去做。对于伟大程序员，也是如此。”Perlis认为，伟大的人有一种内在的特质，这种特质往往比接受训练更重要。但是，这些特质是从哪里来的呢？与生俱来的？还是通过后天勤奋而来的？正如 动画片《料理鼠王》里的幻象大厨Auguste Gusteau说的那样：“谁都能做饭，但只有那些无所畏惧的人才能成为大厨！”我认为“把你生命中的大部分时间花在有针对性的练习上”这种精神，看作一种自愿奉献的精神！但或许“无所畏惧”才是体现这种精神的真谛。或者，就像是《料理鼠王》里那个与 Gusteau 作对的刻薄的美食评论家 Anton Ego 说的那样：“不是任何人都能成为伟大的艺术家，不过，伟大的艺术家可以来自任何地方。” 所以，尽管买本 Java/Ruby/Javascript/PHP 的书吧。你可能会从中学到点儿有用的东西。但作为一个程序员，在 21 天内或 24 小时内改变你的人生，或者提高你实际的编程水平，这是不可能的。你尝试过连续 24 个月不间断的努力提高自己么？好吧，好吧，你该上路了……]]></content>
      <tags>
        <tag>软素质</tag>
      </tags>
  </entry>
</search>
